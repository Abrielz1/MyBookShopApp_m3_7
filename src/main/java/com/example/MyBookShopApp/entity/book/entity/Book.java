package com.example.MyBookShopApp.entity.book.entity;

import com.example.MyBookShopApp.entity.book.links.Book2Author;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import java.time.LocalDate;
import java.util.List;
import java.util.Objects;

@ApiModel(description = "data model for book entity")
@Getter
@Setter
@Entity
//@Builder(toBuilder = true)
@ToString
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "BOOKS")
public class Book {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty(value = "this id is autogenerated by db", position = 1)
    private Long id;

    @Column(name = "pub_date")
    private LocalDate pubDate;

   @OneToMany(mappedBy = "author")
   @Builder.Default
    @ToString.Exclude
    @JsonIgnore
    private List<Book2Author>authorsList;

    @Column(name = "is_bestseller")
    private Boolean isBestseller;

    private String slug;

    @ApiModelProperty(value = "this name of a book", example = "Viy", position = 2)
    private String title;

    private String image;

    @Column(columnDefinition = "TEXT")
    private String description;

    @Column(name = "price")
    @ApiModelProperty(value = "this old price of a book", position = 3)
    private Integer priceOld;

    @Column(name = "discount")
    @ApiModelProperty(value = "this current price of a book", position = 3)
    private Integer price;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Book book = (Book) o;
        return Objects.equals(id, book.id) && Objects.equals(pubDate, book.pubDate) && Objects.equals(authorsList, book.authorsList) && Objects.equals(isBestseller, book.isBestseller) && Objects.equals(slug, book.slug) && Objects.equals(title, book.title) && Objects.equals(image, book.image) && Objects.equals(description, book.description) && Objects.equals(priceOld, book.priceOld) && Objects.equals(price, book.price);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, pubDate, authorsList, isBestseller, slug, title, image, description, priceOld, price);
    }
}
